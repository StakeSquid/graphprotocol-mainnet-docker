{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 3,
  "links": [],
  "panels": [
    {
      "datasource": {
        "default": false,
        "type": "prometheus",
        "uid": "P1809F7CD0C75ACF3"
      },
      "description": "If ingestion falls to zero there is an issue with the graph nodes processing new blocks. Check health of blockchain nodes",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "log": 2,
              "type": "symlog"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 40,
      "options": {
        "legend": {
          "calcs": [
            "mean",
            "last"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Last",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "P1809F7CD0C75ACF3"
          },
          "disableTextWrap": false,
          "editorMode": "code",
          "exemplar": false,
          "expr": "deriv(ethereum_chain_head_number{job=\"index-node-0\"}[1m]) * 60",
          "fullMetaSearch": false,
          "includeNullMetadata": true,
          "legendFormat": "{{network}}",
          "range": true,
          "refId": "A",
          "useBackend": false
        }
      ],
      "title": "Block ingestion rate",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "name"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Network"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "block_number"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Head block"
              },
              {
                "id": "unit",
                "value": "locale"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "block_hash"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Block hash"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align",
                "value": "left"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Network"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 149
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Head block"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 129
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 8
      },
      "id": 38,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\n  name,\n  head_block_number AS \"block_number\",\n  head_block_hash AS \"block_hash\"\nFROM ethereum_networks\nORDER BY name;",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Networks",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "lag"
            },
            "properties": [
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "deployment"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "/d/indexing-performance-metrics/indexing-performance-metrics?orgId=1&var-job=All&var-deployment=${__value.raw}&var-entity=All&var-shard=All&var-network=All&var-provider=All\r"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "is_synced"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "false": {
                        "index": 1,
                        "text": "✖"
                      },
                      "true": {
                        "index": 0,
                        "text": "✔"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "blocks_behind_network"
            },
            "properties": [
              {
                "id": "unit",
                "value": "locale"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 46
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Deployment"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 500
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Subgraph Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 256
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Shard"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 99
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Active"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 169
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Network"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 157
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Synced"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Blocks Behind"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 254
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 145
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Created at"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 179
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 14
      },
      "id": 10,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  subgraph.name || \r\n    CASE \r\n      WHEN subgraph.pending_version = version.id THEN ' (P)'\r\n      WHEN subgraph.current_version = version.id THEN ' (C)'\r\n      ELSE ' (Unknown)' \r\n    END AS subgraph_name,\r\n  deployment.deployment,\r\n  schema.id as schema_id,\r\n  schema.created_at as created,\r\n  shard as shard,\r\n  active as active,\r\n  REPLACE(assignment.node_id, '', '') AS node_id,\r\n  deployment.synced::text AS is_synced,\r\n  network.name AS network_name,\r\n  (network.head_block_number - deployment.latest_ethereum_block_number) AS blocks_behind_network,\r\n  CASE \r\n    WHEN network.name = 'mainnet' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 5)::text\r\n    WHEN network.name = 'rinkeby' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 4)::text\r\n    WHEN network.name = 'kovan' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 15)::text\r\n    WHEN network.name = 'poa-core' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'ropsten' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 2)::text\r\n    WHEN network.name = 'arbitrum-one' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 230)::text\r\n    WHEN network.name = 'arbitrum-sepolia' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 230)::text\r\n    WHEN network.name = 'matic' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'base' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'optimism' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'avalanche' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'fantom' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 40)::text\r\n    WHEN network.name = 'celo' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'gnosis' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'bsc' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 20)::text\r\n    WHEN network.name = 'linea' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'scroll' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 20)::text\r\n    WHEN network.name = 'boba' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'boba-bnb' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 5)::text\r\n    WHEN network.name = 'moonbeam' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 10)::text\r\n    ELSE 'N/A' \r\n  END AS lag\r\nFROM\r\n  subgraphs.subgraph_deployment AS deployment,\r\n  subgraphs.subgraph_deployment_assignment AS assignment,\r\n  subgraphs.subgraph_version AS version,\r\n  subgraphs.subgraph AS subgraph,\r\n  ethereum_networks AS network,\r\n  deployment_schemas AS schema\r\nWHERE\r\n  subgraph.id = version.subgraph\r\n  AND version.id IN (subgraph.pending_version, subgraph.current_version)\r\n  AND assignment.id = schema.id\r\n  AND schema.id = deployment.id\r\n  AND version.deployment = deployment.deployment\r\n  AND NOT deployment.failed\r\n  AND network.name = schema.network\r\n  AND assignment.node_id != 'removed'\r\nORDER BY\r\n  blocks_behind_network DESC,\r\n  subgraph_name;\r\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Healthy Subgraphs Status",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "active": 4,
              "blocks_behind_network": 9,
              "created": 5,
              "deployment": 1,
              "is_synced": 7,
              "lag": 10,
              "network_name": 8,
              "node_id": 6,
              "schema_id": 0,
              "shard": 3,
              "subgraph_name": 2
            },
            "renameByName": {
              "active": "Active",
              "blocks_behind_network": "Blocks Behind",
              "created": "Created at",
              "deployment": "Deployment",
              "is_synced": "Synced",
              "lag": "Lag",
              "network_name": "Network",
              "node_id": "Node ID",
              "schema_id": "ID",
              "shard": "Shard",
              "subgraph_name": "Subgraph Name"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "lag"
            },
            "properties": [
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "deployment"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "/d/indexing-performance-metrics/indexing-performance-metrics?orgId=1&var-job=All&var-deployment=${__value.raw}&var-entity=All&var-shard=All&var-network=All&var-provider=All\r"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "is_synced"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "false": {
                        "index": 1,
                        "text": "✖"
                      },
                      "true": {
                        "index": 0,
                        "text": "✔"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "blocks_behind_network"
            },
            "properties": [
              {
                "id": "unit",
                "value": "locale"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 46
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Deployment"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 500
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Subgraph Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 256
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Shard"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 99
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Active"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 169
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Network"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 157
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Synced"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Blocks Behind"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 254
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 145
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Created at"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 179
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 27
      },
      "id": 41,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  subgraph.name || \r\n    CASE \r\n      WHEN subgraph.pending_version = version.id THEN ' (P)'\r\n      WHEN subgraph.current_version = version.id THEN ' (C)'\r\n      ELSE ' (Unknown)' \r\n    END AS subgraph_name,\r\n  deployment.deployment,\r\n  schema.id as schema_id,\r\n  schema.created_at as created,\r\n  shard as shard,\r\n  active as active,\r\n  REPLACE(assignment.node_id, '', '') AS node_id,\r\n  deployment.synced::text AS is_synced,\r\n  network.name AS network_name,\r\n  (network.head_block_number - deployment.latest_ethereum_block_number) AS blocks_behind_network,\r\n  CASE \r\n    WHEN network.name = 'mainnet' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 5)::text\r\n    WHEN network.name = 'rinkeby' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 4)::text\r\n    WHEN network.name = 'kovan' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 15)::text\r\n    WHEN network.name = 'poa-core' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'ropsten' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 2)::text\r\n    WHEN network.name = 'arbitrum-one' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 230)::text\r\n    WHEN network.name = 'arbitrum-sepolia' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 230)::text\r\n    WHEN network.name = 'matic' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'base' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'optimism' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'avalanche' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'fantom' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 40)::text\r\n    WHEN network.name = 'celo' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'gnosis' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'bsc' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 20)::text\r\n    WHEN network.name = 'linea' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'scroll' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 20)::text\r\n    WHEN network.name = 'boba' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'boba-bnb' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 5)::text\r\n    WHEN network.name = 'moonbeam' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 10)::text\r\n    ELSE 'N/A' \r\n  END AS lag\r\nFROM\r\n  subgraphs.subgraph_deployment AS deployment,\r\n  subgraphs.subgraph_deployment_assignment AS assignment,\r\n  subgraphs.subgraph_version AS version,\r\n  subgraphs.subgraph AS subgraph,\r\n  ethereum_networks AS network,\r\n  deployment_schemas AS schema\r\nWHERE\r\n  subgraph.id = version.subgraph\r\n  AND version.id IN (subgraph.pending_version, subgraph.current_version)\r\n  AND assignment.id = schema.id\r\n  AND schema.id = deployment.id\r\n  AND version.deployment = deployment.deployment\r\n  AND NOT deployment.failed\r\n  AND network.name = schema.network\r\n  AND assignment.node_id not like 'index_node_%'\r\nORDER BY\r\n  blocks_behind_network DESC,\r\n  subgraph_name;\r\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Paused Subgraphs Status",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "active": 4,
              "blocks_behind_network": 9,
              "created": 5,
              "deployment": 1,
              "is_synced": 7,
              "lag": 10,
              "network_name": 8,
              "node_id": 6,
              "schema_id": 0,
              "shard": 3,
              "subgraph_name": 2
            },
            "renameByName": {
              "active": "Active",
              "blocks_behind_network": "Blocks Behind",
              "created": "Created at",
              "deployment": "Deployment",
              "is_synced": "Synced",
              "lag": "Lag",
              "network_name": "Network",
              "node_id": "Node ID",
              "schema_id": "ID",
              "shard": "Shard",
              "subgraph_name": "Subgraph Name"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 0,
        "y": 40
      },
      "id": 36,
      "options": {
        "dedupStrategy": "exact",
        "enableLogDetails": true,
        "prettifyLogMessage": false,
        "showCommonLabels": false,
        "showLabels": false,
        "showTime": false,
        "sortOrder": "Descending",
        "wrapLogMessage": true
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH ranked_errors AS (\n    SELECT \n        subgraph_id, \n        vid, \n        encode(block_hash, 'hex') AS block_hash, \n        message, \n        handler, \n        deterministic, \n        created_at,\n        ROW_NUMBER() OVER (PARTITION BY subgraph_id ORDER BY vid DESC) AS rnk\n    FROM subgraphs.subgraph_error\n    WHERE deterministic = true\n)\nSELECT \n    subgraph_id, \n    vid, \n    block_hash, \n    message, \n    handler, \n    deterministic, \n    created_at\nFROM ranked_errors\nWHERE rnk = 1\nORDER BY vid DESC;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "subgraphs.subgraph_error",
          "timeColumn": "time",
          "where": []
        }
      ],
      "title": "Deterministic Errors",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "vid": true
            },
            "indexByName": {
              "block_hash": 2,
              "created_at": 6,
              "deterministic": 5,
              "handler": 4,
              "message": 3,
              "subgraph_id": 0,
              "vid": 1
            },
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "logs"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 8,
        "y": 40
      },
      "id": 42,
      "options": {
        "dedupStrategy": "exact",
        "enableLogDetails": true,
        "prettifyLogMessage": false,
        "showCommonLabels": false,
        "showLabels": false,
        "showTime": false,
        "sortOrder": "Descending",
        "wrapLogMessage": true
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH ranked_errors AS (\n    SELECT \n        subgraph_id, \n        vid, \n        encode(block_hash, 'hex') AS block_hash, \n        message, \n        handler, \n        deterministic, \n        created_at,\n        ROW_NUMBER() OVER (PARTITION BY subgraph_id ORDER BY vid DESC) AS rnk\n    FROM subgraphs.subgraph_error\n    WHERE deterministic = false\n)\nSELECT \n    subgraph_id, \n    vid, \n    block_hash, \n    message, \n    handler, \n    deterministic, \n    created_at\nFROM ranked_errors\nWHERE rnk = 1\nORDER BY vid DESC;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "subgraphs.subgraph_error",
          "timeColumn": "time",
          "where": []
        }
      ],
      "title": "Non-Deterministic Errors",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "vid": true
            },
            "indexByName": {
              "block_hash": 2,
              "created_at": 6,
              "deterministic": 5,
              "handler": 4,
              "message": 3,
              "subgraph_id": 0,
              "vid": 1
            },
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "logs"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 8,
        "x": 16,
        "y": 40
      },
      "id": 43,
      "options": {
        "dedupStrategy": "exact",
        "enableLogDetails": true,
        "prettifyLogMessage": false,
        "showCommonLabels": false,
        "showLabels": false,
        "showTime": false,
        "sortOrder": "Descending",
        "wrapLogMessage": true
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "WITH ranked_errors AS (\n    SELECT \n        subgraph_id, \n        vid, \n        encode(block_hash, 'hex') AS block_hash, \n        message, \n        handler, \n        deterministic, \n        created_at,\n        ROW_NUMBER() OVER (PARTITION BY subgraph_id ORDER BY vid DESC) AS rnk\n    FROM subgraphs.subgraph_error\n)\nSELECT \n    subgraph_id, \n    vid, \n    block_hash, \n    message, \n    handler, \n    deterministic, \n    created_at\nFROM ranked_errors\nWHERE rnk = 1\nORDER BY vid DESC;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "subgraphs.subgraph_error",
          "timeColumn": "time",
          "where": []
        }
      ],
      "title": "All Errors",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "vid": true
            },
            "indexByName": {
              "block_hash": 2,
              "created_at": 6,
              "deterministic": 5,
              "handler": 4,
              "message": 3,
              "subgraph_id": 0,
              "vid": 1
            },
            "renameByName": {}
          }
        }
      ],
      "transparent": true,
      "type": "logs"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "super-light-blue",
                "value": null
              },
              {
                "color": "dark-green",
                "value": 0
              },
              {
                "color": "semi-dark-red",
                "value": 1
              }
            ]
          },
          "unit": "locale"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Deployment ID"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "/d/indexing-performance-metrics/indexing-performance-metrics?orgId=1&var-job=All&var-deployment=${__value.raw}&var-entity=All&var-shard=All&var-network=All&var-provider=All"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 466
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Health"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "failed": {
                        "index": 1,
                        "text": "🚩"
                      },
                      "healthy": {
                        "index": 2,
                        "text": "✅"
                      },
                      "unhealthy": {
                        "index": 0,
                        "text": "⚠️"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 89
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Sync"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "false": {
                        "index": 1,
                        "text": "✖"
                      },
                      "true": {
                        "index": 0,
                        "text": "✔"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 82
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Size"
            },
            "properties": [
              {
                "id": "unit",
                "value": "bytes"
              },
              {
                "id": "custom.width",
                "value": 120
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Schema"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 57
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Deployment Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 244
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Repository"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 278
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 126
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Shard"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 98
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Created At"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 177
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Failed"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 83
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Last Block"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 139
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Entities"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 122
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Start Hash"
            },
            "properties": [
              {
                "id": "custom.width"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Reorg Count"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 114
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Curr Reorg Count"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 104
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 48
      },
      "id": 37,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Bytes"
          }
        ]
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \n    ds.name as deployment_schema,\n    ds.shard as deployment_shard,\n    ds.created_at as deployment_created_at,\n    sg.name as deployment_name,\n    sd.deployment as deployment,\n    substring(sm.repository, 20, 31) as git_repo,\n    sda.node_id as node_id,\n    sd.health as sub_health,\n    sd.failed as sub_failed,\n    sd.synced as sub_sync,\n    sd.latest_ethereum_block_number as last_block,\n    sd.entity_count as sub_entity,\n    size.total_bytes as size_total, \n    size.total_bytes as size_total_bytes, \n    sm.start_block_number as start_block, \n    encode(sm.start_block_hash, 'hex') as start_hash, \n    encode(sd.latest_ethereum_block_hash, 'hex') as last_hash,\n    sd.reorg_count as reorg_count, \n    sd.current_reorg_depth as curr_reorg_count, \n    sd.max_reorg_depth as max_reorg,\n    ds.network as network,\n    -- Removed subgraph_name, is_synced, and network_name\n    (network.head_block_number - sd.latest_ethereum_block_number) AS blocks_behind_network,\n    CASE \n        WHEN network.name = 'mainnet' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 5)::text\n        WHEN network.name = 'rinkeby' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 4)::text\n        WHEN network.name = 'kovan' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 15)::text\n        WHEN network.name = 'poa-core' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 12)::text\n        WHEN network.name = 'ropsten' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 2)::text\n        WHEN network.name = 'arbitrum-one' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 230)::text\n        WHEN network.name = 'arbitrum-sepolia' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 230)::text\n        WHEN network.name = 'matic' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 30)::text\n        WHEN network.name = 'base' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 30)::text\n        WHEN network.name = 'optimism' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 30)::text\n        WHEN network.name = 'avalanche' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 30)::text\n        WHEN network.name = 'fantom' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 40)::text\n        WHEN network.name = 'celo' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 12)::text\n        WHEN network.name = 'gnosis' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 12)::text\n        WHEN network.name = 'bsc' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 20)::text\n        WHEN network.name = 'linea' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 30)::text\n        WHEN network.name = 'scroll' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 20)::text\n        WHEN network.name = 'boba' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 30)::text\n        WHEN network.name = 'boba-bnb' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 5)::text\n        WHEN network.name = 'moonbeam' THEN ((network.head_block_number - sd.latest_ethereum_block_number) / 10)::text\n        ELSE 'N/A' \n    END AS lag\nFROM subgraphs.subgraph_deployment AS sd\nJOIN subgraphs.subgraph_manifest AS sm ON (sm.id = sd.id)\nJOIN public.deployment_schemas AS ds ON (ds.subgraph = sd.deployment)\nJOIN subgraphs.subgraph_version AS sv ON (sv.deployment = sd.deployment)\nJOIN subgraphs.subgraph AS sg ON (sv.id IN (sg.current_version, sg.pending_version)) -- Added subgraph JOIN\nLEFT JOIN subgraphs.subgraph_deployment_assignment AS sda ON (sda.id = sd.id)\nLEFT JOIN info.subgraph_sizes AS size ON (ds.name = size.name)\nJOIN ethereum_networks AS network ON (network.name = ds.network)\nORDER BY sd.id;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "table": "subgraphs.subgraph_error",
          "timeColumn": "time",
          "where": []
        }
      ],
      "title": "Subgraph Health",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "num": true
            },
            "includeByName": {},
            "indexByName": {
              "blocks_behind_network": 12,
              "curr_reorg_count": 21,
              "deployment": 2,
              "deployment_created_at": 7,
              "deployment_name": 1,
              "deployment_schema": 0,
              "deployment_shard": 5,
              "git_repo": 3,
              "lag": 13,
              "last_block": 11,
              "last_hash": 19,
              "max_reorg": 22,
              "network": 6,
              "node_id": 4,
              "reorg_count": 20,
              "size_total": 15,
              "size_total_bytes": 16,
              "start_block": 17,
              "start_hash": 18,
              "sub_entity": 14,
              "sub_failed": 9,
              "sub_health": 8,
              "sub_sync": 10
            },
            "renameByName": {
              "blocks_behind_network": "Blocks Behind",
              "curr_reorg_count": "Curr Reorg Count",
              "deployment": "Deployment ID",
              "deployment_created_at": "Created At",
              "deployment_id": "Deployment ID",
              "deployment_name": "Deployment Name",
              "deployment_schema": "Schema",
              "deployment_shard": "Shard",
              "git_repo": "Repository",
              "lag": "Lag",
              "last_block": "Last Block",
              "last_hash": "Last Hash",
              "max_reorg": "Max Reorg",
              "network": "Network",
              "node_id": "Node ID",
              "reorg_count": "Reorg Count",
              "size_total": "Size",
              "size_total_bytes": "Bytes",
              "start_block": "Start Block",
              "start_hash": "Start Hash",
              "sub_entity": "Entities",
              "sub_failed": "Failed",
              "sub_health": "Health",
              "sub_sync": "Sync"
            }
          }
        },
        {
          "id": "filterByValue",
          "options": {
            "filters": [
              {
                "config": {
                  "id": "isNotNull",
                  "options": {}
                },
                "fieldName": "Deployment Name"
              }
            ],
            "match": "all",
            "type": "include"
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "num_assigned"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Number"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "nodeid"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Node ID"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align",
                "value": "left"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "deployments"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "Deployment ID"
              },
              {
                "id": "unit",
                "value": "short"
              },
              {
                "id": "decimals",
                "value": 2
              },
              {
                "id": "custom.align",
                "value": "left"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 109
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Number"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 93
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 24,
        "x": 0,
        "y": 58
      },
      "id": 6,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "select replace(node_id, '', '') as nodeId,\n       count(*) as num_assigned,\n       array_agg(id) as deployments\n  from subgraphs.subgraph_deployment_assignment\n group by node_id\n order by node_id asc;\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "Subgraph Node Assignments",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "default": false,
        "type": "grafana-postgresql-datasource",
        "uid": "PA942B37CCFAF5A81"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "auto"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "lag"
            },
            "properties": [
              {
                "id": "unit",
                "value": "m"
              },
              {
                "id": "decimals",
                "value": 1
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "deployment"
            },
            "properties": [
              {
                "id": "links",
                "value": [
                  {
                    "targetBlank": true,
                    "title": "",
                    "url": "/d/indexing-performance-metrics/indexing-performance-metrics?orgId=1&var-job=All&var-deployment=${__value.raw}&var-entity=All&var-shard=All&var-network=All&var-provider=All\r"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "is_synced"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "false": {
                        "index": 1,
                        "text": "✖"
                      },
                      "true": {
                        "index": 0,
                        "text": "✔"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "blocks_behind_network"
            },
            "properties": [
              {
                "id": "unit",
                "value": "locale"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 46
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Deployment"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 500
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Subgraph Name"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 256
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Shard"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 99
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Active"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 169
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Network"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 157
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Synced"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 140
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Blocks Behind"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 197
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Node ID"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 145
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Created at"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 179
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "failed"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "false": {
                        "index": 1,
                        "text": "-"
                      },
                      "true": {
                        "index": 0,
                        "text": "🚩"
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Failed"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 100
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 13,
        "w": 24,
        "x": 0,
        "y": 63
      },
      "id": 44,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "11.3.0",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "PA942B37CCFAF5A81"
          },
          "editorMode": "code",
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  subgraph.name || \r\n    CASE \r\n      WHEN subgraph.pending_version = version.id THEN ' (P)'\r\n      WHEN subgraph.current_version = version.id THEN ' (C)'\r\n      ELSE ' (Unknown)' \r\n    END AS subgraph_name,\r\n  deployment.deployment,\r\n  schema.id as schema_id,\r\n  schema.created_at as created,\r\n  shard as shard,\r\n  active as active,\r\n  failed as failed,\r\n  REPLACE(assignment.node_id, '', '') AS node_id,\r\n  deployment.synced::text AS is_synced,\r\n  network.name AS network_name,\r\n  (network.head_block_number - deployment.latest_ethereum_block_number) AS blocks_behind_network,\r\n  CASE \r\n    WHEN network.name = 'mainnet' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 5)::text\r\n    WHEN network.name = 'rinkeby' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 4)::text\r\n    WHEN network.name = 'kovan' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 15)::text\r\n    WHEN network.name = 'poa-core' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'ropsten' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 2)::text\r\n    WHEN network.name = 'arbitrum-one' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 230)::text\r\n    WHEN network.name = 'arbitrum-sepolia' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 230)::text\r\n    WHEN network.name = 'matic' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'base' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'optimism' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'avalanche' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'fantom' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 40)::text\r\n    WHEN network.name = 'celo' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'gnosis' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 12)::text\r\n    WHEN network.name = 'bsc' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 20)::text\r\n    WHEN network.name = 'linea' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'scroll' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 20)::text\r\n    WHEN network.name = 'boba' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 30)::text\r\n    WHEN network.name = 'boba-bnb' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 5)::text\r\n    WHEN network.name = 'moonbeam' THEN ((network.head_block_number - deployment.latest_ethereum_block_number) / 10)::text\r\n    ELSE 'N/A' \r\n  END AS lag\r\nFROM\r\n  subgraphs.subgraph_deployment AS deployment,\r\n  subgraphs.subgraph_deployment_assignment AS assignment,\r\n  subgraphs.subgraph_version AS version,\r\n  subgraphs.subgraph AS subgraph,\r\n  ethereum_networks AS network,\r\n  deployment_schemas AS schema\r\nWHERE\r\n  subgraph.id = version.subgraph\r\n  AND version.id IN (subgraph.pending_version, subgraph.current_version)\r\n  AND assignment.id = schema.id\r\n  AND schema.id = deployment.id\r\n  AND version.deployment = deployment.deployment\r\n  AND network.name = schema.network\r\nORDER BY\r\n  blocks_behind_network DESC,\r\n  subgraph_name;\r\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          },
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "title": "All Subgraphs Status",
      "transformations": [
        {
          "id": "merge",
          "options": {
            "reducers": []
          }
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "active": 4,
              "blocks_behind_network": 10,
              "created": 5,
              "deployment": 1,
              "failed": 8,
              "is_synced": 7,
              "lag": 11,
              "network_name": 9,
              "node_id": 6,
              "schema_id": 0,
              "shard": 3,
              "subgraph_name": 2
            },
            "renameByName": {
              "active": "Active",
              "blocks_behind_network": "Blocks Behind",
              "created": "Created at",
              "deployment": "Deployment",
              "failed": "Failed",
              "is_synced": "Synced",
              "lag": "Lag",
              "network_name": "Network",
              "node_id": "Node ID",
              "schema_id": "ID",
              "shard": "Shard",
              "subgraph_name": "Subgraph Name"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "baseFilters": [],
        "datasource": {
          "uid": "Elasticsearch"
        },
        "filters": [],
        "name": "Filters",
        "type": "adhoc"
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Indexing Status Overview",
  "uid": "indexing-status-overview",
  "version": 4,
  "weekStart": ""
}